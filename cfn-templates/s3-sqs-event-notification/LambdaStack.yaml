AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Lambda for processing the documents
Parameters:
  Environment:
    Description: "Environment Name"
    Type: "String"
Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role:
        Fn::ImportValue:
          !Sub "${Environment}-FileIngestionLambdaRoleArn"
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import logging

          import boto3
          import time

          from urllib import request
          from botocore.exceptions import ClientError
          import urllib.parse

          # Configure logging

          LOGGER = logging.getLogger(__name__)
          LOGGER.setLevel(logging.DEBUG)

          ssm_client = boto3.client('ssm')

          '''
          Function to retrieve keys from Secret Manager
          '''


          def retrieve_secrets() -> dict:
              # variables
              secret_name = "dev/lambda"
              secret_dict = {}

              # Create a Secrets Manager client
              client = boto3.client(service_name='secretsmanager')
              try:
                  get_secret_value_response = client.get_secret_value(
                      SecretId=secret_name
                  )

                  if 'SecretString' in get_secret_value_response:
                      secret = get_secret_value_response['SecretString']
                      LOGGER.debug('------Inside secrets if block--------')
                      secret_dict = json.loads(secret)
                      LOGGER.debug(secret)
              except BaseException as e:
                  raise e
              finally:
                  return secret_dict


          '''
          Function to store access token from cognito
          '''


          def store_tokens_from_cognito() -> str:
              LOGGER.debug('------Token expired. Fetching the token from Cognito--------')

              # Get the secrets
              secret_dict = retrieve_secrets()

              # Get the clients
              cognito_client = boto3.client('cognito-idp')

              # Initiate Authentication
              response = cognito_client.admin_initiate_auth(
                  UserPoolId=secret_dict['UserPoolId'],
                  ClientId=secret_dict['ClientId'],
                  AuthFlow='ADMIN_USER_PASSWORD_AUTH',
                  AuthParameters={
                      'USERNAME': secret_dict['Username'],
                      'PASSWORD': secret_dict['Password']}
              )

              LOGGER.debug('------Storing the tokens in SSM--------')

              # Add the parameters to the SSM
              ssm_client.put_parameter(
                  Name='cognito_access_token',
                  Description='Stores the access token',
                  Value=response['AuthenticationResult']['AccessToken'],
                  Type='SecureString',
                  Overwrite=True
              )

              LOGGER.debug('------Storing the expiry time in seconds--------')
              expires_in = time.time() + float(response['AuthenticationResult']['ExpiresIn'])
              ssm_client.put_parameter(
                  Name='cognito_access_token_expiry',
                  Description='Stores the access token expiry',
                  Value=str(expires_in),
                  Type='SecureString',
                  Overwrite=True
              )
              return response['AuthenticationResult']['AccessToken']


          '''
          Function to check if the token is valid
          '''


          def token_is_valid() -> bool:
              LOGGER.debug('------Trying to fetch the token validity from SSM--------')

              try:
                  response = ssm_client.get_parameter(
                      Name='cognito_access_token_expiry',
                      WithDecryption=True
                  )
                  current_time = time.time()
                  expiry_time = response['Parameter']['Value']
                  if current_time > float(expiry_time):
                      return False
                  else:
                      return True
              except ClientError as ce:
                  code_ = ce.response['Error']['Code']
                  if code_ == "ParameterNotFound":
                      LOGGER.debug('------Token expiry not found in SSM, marking as invalid. Fetch from Cognito--------')
                      return False
                  else:
                      raise BaseException(ce)
              except BaseException as e:
                  raise e


          '''
          Function to retrieve the tokens for the API invocation
          '''


          def retrieve_tokens() -> str:
              LOGGER.debug('------Trying to fetch the token from SSM--------')

              if token_is_valid():
                  LOGGER.debug('------Token is valid--------')
                  try:
                      response = ssm_client.get_parameter(
                          Name='cognito_access_token',
                          WithDecryption=True
                      )
                      return response['Parameter']['Value']
                  except ClientError as ce:
                      code_ = ce.response['Error']['Code']
                      if code_ == "ParameterNotFound":
                          LOGGER.debug('------Token not found in SSM, falling back to cognito--------')
                          new_token = store_tokens_from_cognito()
                          return new_token
                      else:
                          raise BaseException(ce)
                  except BaseException as e:
                      raise e
              else:
                  LOGGER.debug('------Token is invalid, falling back to cognito--------')
                  new_token = store_tokens_from_cognito()
                  return new_token


          '''
          Function to invoke REST API
          '''


          def handler(event, context):
              LOGGER.debug(json.dumps(event, indent=4, default=str))
              data = {}
              token = retrieve_tokens()

              hdr = {
                  "cognitoidtoken": token,
                  "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5",
                  "Accept": "*/*",
                  "Referer": "https://www.mywbsite.fr/data/mult.aspx",
                  "Accept-Encoding": "gzip,deflate,sdch",
                  "Accept-Language": "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
                  "Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.3",
                  "Connection": "keep-alive",
                  "Content-Type": "application/json"
              }


              try:
                  records_ = event['Records']
                  for sqs_record in records_:
                      # The body of the SQS message is a text, hence converting it into a python dictionary
                      s3_event_string = sqs_record['body']
                      s3_event = json.loads(s3_event_string)

                      for s3_record in s3_event['Records']:
                          data['bucketName'] = s3_record['s3']['bucket']['name']
                          data['key'] = s3_record['s3']['object']['key']
                          data['eventTime'] = s3_record['eventTime']

                  post_url = 'https://document.dchsdev-internal.deloitte.convergehealthsafety.com/api/documentservice/process'
                  req = request.Request(post_url, str.encode(json.dumps(data)), headers=hdr)
                  LOGGER.debug('---------Invoking the documentservice endpoint---------')
                  request.urlopen(req)
              except BaseException as ex:
                  raise ex
              finally:
                  LOGGER.debug(json.dumps(data, indent=4, default=str))
      Description: Lambda function to invoke the REST endpoint
      MemorySize: 512
      Timeout: 60

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn:
        Fn::ImportValue:
          !Sub "${Environment}-FileIngestionQueueArn"
      FunctionName: !GetAtt LambdaFunction.Arn